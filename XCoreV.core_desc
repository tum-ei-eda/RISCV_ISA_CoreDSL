import "RISCVBase.core_desc"

InstructionSet XCoreVMem extends RISCVBase {
    instructions {
        // ?
        CV_LB_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0001011;
            assembly:"{name(rd)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<8> res = (signed<8>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV_LBU_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b0001011;
            assembly:"{name(rd)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                unsigned<8> res = (unsigned<8>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV_LH_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b0001011;
            assembly:"{name(rd)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<16> res = (signed<16>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV_LHU_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b0001011;
            assembly:"{name(rd)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                unsigned<16> res = (unsigned<16>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV_LW_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0001011;
            assembly:"{name(rd)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<32> res = (signed<32>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV_LB_rr_inc {
            encoding: 7'b0000000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<8> res = (signed<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV_LBU_rr_inc {
            encoding: 7'b0001000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                unsigned<8> res = (unsigned<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV_LH_rr_inc {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<16> res = (signed<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV_LHU_rr_inc {
            encoding: 7'b0001001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                unsigned<16> res = (unsigned<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV_LW_rr_inc {
            encoding: 7'b0000010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<32> res = (signed<32>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV_LB_rr {
            encoding: 7'b0000100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                signed<8> res = (signed<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV_LBU_rr {
            encoding: 7'b0001100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                unsigned<8> res = (unsigned<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV_LH_rr {
            encoding: 7'b0000101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                signed<16> res = (signed<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV_LHU_rr {
            encoding: 7'b0001101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                unsigned<16> res = (unsigned<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV_LW_rr {
            encoding: 7'b0000110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs2)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                signed<32> res = (signed<32>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV_SB_ri_inc {
            encoding: imm12[11:5] :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: imm12[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> store_address = X[rs1];
                MEM[store_address] = (signed<8>)X[rs2];
                X[rs1] += (signed)imm12;
            }
        }
        CV_SH_ri_inc {
            encoding: imm12[11:5] :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: imm12[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> store_address = X[rs1];
                MEM[store_address] = (signed<16>)X[rs2];
                X[rs1] += (signed)imm12;
            }
        }
        CV_SW_ri_inc {
            encoding: imm12[11:5] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: imm12[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {imm12}({name(rs1)}!)";
            behavior: {
                unsigned<XLEN> store_address = X[rs1];
                MEM[store_address] = (signed<32>)X[rs2];
                X[rs1] += (signed)imm12;
            }
        }
        CV_SB_rr_inc {
            encoding: 7'b0010000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {name(rs3)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> store_address = X[rs1];  // TODO: signed?
								MEM[store_address] = (signed<8>)X[rs2];
                X[rs1] += (signed)X[rs3];
            }
        }
        CV_SH_rr_inc {
            encoding: 7'b0010001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {name(rs3)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> store_address = X[rs1];  // TODO: signed?
								MEM[store_address] = (signed<16>)X[rs2];
                X[rs1] += (signed)X[rs3];
            }
        }
        CV_SW_rr_inc {
            encoding: 7'b0010010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {name(rs3)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> store_address = X[rs1];  // TODO: signed?
								MEM[store_address] = (signed<32>)X[rs2];
                X[rs1] += (signed)X[rs3];
            }
        }
        CV_SB_rr {
            encoding: 7'b0010100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {name(rs3)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> store_address = X[rs1] + X[rs3];  // TODO: signed?
								MEM[store_address] = (signed<8>)X[rs2];
            }
        }
        CV_SH_rr {
            encoding: 7'b0010101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {name(rs3)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> store_address = X[rs1] + X[rs3];  // TODO: signed?
								MEM[store_address] = (signed<16>)X[rs2];
            }
        }
        CV_SW_rr {
            encoding: 7'b0010110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011;
            assembly:"{name(rs2)}, {name(rs3)}({name(rs1)})";
            behavior: {
                unsigned<XLEN> store_address = X[rs1] + X[rs3];  // TODO: signed?
								MEM[store_address] = (signed<32>)X[rs2];
            }
        }
    }
}

InstructionSet XCoreVMac extends RISCVBase {
    instructions {
        // 32-Bit x 32-Bit Multiplication Operations (Signed)
        CV_MAC {
            encoding: 7'b1001000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
              // signed<65> result = (signed)X[rs1] * (signed)X[rs2] + (signed)X[rd];
              signed<64> result = (signed)X[rs1] * (signed)X[rs2] + (signed)X[rd];
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MSU {
            encoding: 7'b1001001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
              // signed<65> result = (signed)X[rd] - (signed)X[rs1] * (signed)X[rs2] ;
              signed<64> result = (signed)X[rd] - (signed)X[rs1] * (signed)X[rs2] ;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        // 16-Bit x 16-Bit Multiplication
        CV_MULUN {
            encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              unsigned<32> result = ((unsigned)X[rs1][15:0] * (unsigned)X[rs2][15:0]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MULHHUN {
            encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              unsigned<32> result = ((unsigned)X[rs1][31:16] * (unsigned)X[rs2][31:16]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MULS {
            encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              signed<32> result = ((signed)X[rs1][15:0] * (signed)X[rs2][15:0]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MULSN {
            encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              signed<32> result = ((signed)X[rs1][15:0] * (signed)X[rs2][15:0]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MULHHSN {
            encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              signed<32> result = ((signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MULURN {
            encoding: 2'b10:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b101 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				signed<31> product = (unsigned)X[rs1][15:0] * (unsigned)X[rs2][15:0];
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				unsigned<32> sum = product + powerOf2;
				unsigned<32> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
        CV_MULHHURN {
            encoding: 2'b11:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b101 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				signed<31> product = (unsigned)X[rs1][31:16] * (unsigned)X[rs2][31:16];
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				unsigned<32> sum = product + powerOf2;
				unsigned<32> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
        CV_MULSRN {
            encoding: 2'b10:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b100 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				signed<31> product = (signed)X[rs1][15:0] * (signed)X[rs2][15:0];
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				signed<32> sum = product + powerOf2;
				signed<32> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
        CV_MULHHSRN {
            encoding: 2'b11:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b100 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				signed<31> product = (signed)X[rs1][31:16] * (signed)X[rs2][31:16];
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				signed<32> sum = product + powerOf2;
				signed<32> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
        // 16-Bit x 16-Bit Multiply-Accumulate
        CV_MACUN {
            encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              unsigned<32> result = ((unsigned)X[rs1][15:0] * (unsigned)X[rs2][15:0] + (unsigned)X[rd]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MACHHUN {
            encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              unsigned<32> result = ((unsigned)X[rs1][31:16] * (unsigned)X[rs2][31:16] + (unsigned)X[rd]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MACSN {
            encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1011011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              signed<32> result = ((signed)X[rs1][15:0] * (signed)X[rs2][15:0] + (signed)X[rd]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MACHHSN {
            encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1011011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              signed<32> result = ((signed)X[rs1][31:16] * (signed)X[rs2][31:16] + (signed)X[rd]) >> Is3;
              if(rd != 0) X[rd] = result[31:0];
            }
        }
        CV_MACURN {
            encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b110 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				unsigned<30> product = (unsigned)(X[rs1][15:0]) * (unsigned)(X[rs2][15:0]);
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				unsigned<33> sum = product + (unsigned)X[rd] + powerOf2;
				unsigned<33> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
        CV_MACHHURN {
            encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b110 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				unsigned<30> product = (unsigned)(X[rs1][31:16]) * (unsigned)(X[rs2][31:16]);
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				unsigned<33> sum = product + (unsigned)X[rd] + powerOf2;
				unsigned<33> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
        CV_MACSRN {
            encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b111 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				signed<31> product = (signed)X[rs1][15:0] * (signed)X[rs2][15:0];
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				signed<32> sum = product + (signed)X[rd] + powerOf2;
				signed<32> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
        CV_MACHHSRN {
            encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 0b111 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
				signed<31> product = (signed)X[rs1][31:16] * (signed)X[rs2][31:16];
				unsigned<30> powerOf2 = 1 << (Is3-1);  // TODO: Is3 = max(Is3, 1)
				signed<32> sum = product + (signed)X[rd] + powerOf2;
				signed<32> rounded = sum >> Is3;

				X[rd] = rounded[31:0];
            }
        }
    }
}

InstructionSet XCoreVAlu extends RISCVBase {
    instructions {
        CV_MAX {
            encoding: 7'b0101101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly:"{cv.max}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                X[rd] = (signed)X[rs1] > (signed)X[rs2] ? X[rs1] : X[rs2];  // signed
            }
        }
        CV_MAXU {
            encoding: 7'b0101110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly:"{cv.maxu}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                X[rd] = (unsigned)X[rs1] > (unsigned)X[rs2] ? X[rs1] : X[rs2];  // unsigned
            }
        }
        CV_MIN {
            encoding: 7'b0101011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly:"{cv.min}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                X[rd] = (signed)X[rs1] < (signed)X[rs2] ? X[rs1] : X[rs2];  // signed
            }
        }
        CV_MINU {
            encoding: 7'b0101100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly:"{cv.minu}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                X[rd] = (unsigned)X[rs1] < (unsigned)X[rs2] ? X[rs1] : X[rs2];  // unsigned
            }
        }
        CV_ABS {
            encoding: 7'b0101000 :: 00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.abs}, {name(rd)}, {name(rs1)}";
            behavior: {
                X[rd] = (signed)X[rs1] < 0 ? -1 * X[rs1] : X[rs1];  // unsigned
            }
        }
        CV_ADDN {
            encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.addn}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              X[rd] = ((signed)(X[rs1] + X[rs2])) >> Is3;
            }
        }
        CV_ADDNR {
            encoding: 7'b1000000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.addnr}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
               X[rd] = ((signed)(X[rd] + X[rs1])) >> (unsigned)X[rs2][4:0];
            }
        }
        CV_ADDRN {
            encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.addrn}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
               X[rd] = ((signed)(X[rs1] + X[rs2] + 2^(Is3 - 1))) >> Is3;
            }
        }
        CV_ADDUN {
            encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.addun}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
               X[rd] = (unsigned)(X[rs1] + X[rs2]) >> Is3;
            }
        }
        CV_ADDUNR {
            encoding: 7'b1000001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.addunr}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
               X[rd] = (unsigned)(X[rd] + X[rs1]) >> X[rs2][4:0];
            }
        }
        CV_ADDURN {
            encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.addurn}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
               X[rd] = (unsigned)(X[rs1] + X[rs2] + 2^(Is3 - 1)) >> Is3;
            }
        }
        CV_CLIP {
            encoding: 7'b0111000 :: Is2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.clip}, {name(rd)}, {name(rs1)}, {Is2}";
            behavior: {
                X[rd] = X[rs1]<= (-2)^(Is2 - 1) ? (-2)^(Is2 - 1) : (rs1 >= (2)^(Is2 - 1) ? (2)^(Is2 - 1) : X[rs1]);
            }
        }
        CV_CLIPU {
            encoding: 7'b0111001 :: Is2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.clipu}, {name(rd)}, {name(rs1)}, {Is2}";
            behavior: {
               X[rd] = X[rs1]<= 0 ? 0 : (X[rs1] >= (2)^(Is2 - 1) ? (2)^(Is2 - 1) : X[rs1]);
            }
        }
        CV_CLIPUR {
            encoding: 7'b0111010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.clipur}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
               X[rd] = X[rs1]<= 0 ? 0 : (X[rs1] >= X[rs2] ? X[rs2] : X[rs1]);
            }
        }
        CV_EXTBS {
            encoding: 7'b0110010 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.extbs}, {name(rd)}, {name(rs1)}";
            behavior: {
               X[rd] = (signed)X[rs1][7:0];
            }
        }
        CV_EXTBZ {
            encoding: 7'b0110011 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.extbz}, {name(rd)}, {name(rs1)}";
            behavior: {
               X[rd] = (unsigned)X[rs1][7:0];
            }
        }
        CV_EXTHS {
            encoding: 7'b0110000 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.exths}, {name(rd)}, {name(rs1)}";
            behavior: {
               X[rd] = (signed)X[rs1][15:0];
            }
        }
        CV_EXTHZ {
            encoding: 7'b0110001 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.exthz}, {name(rd)}, {name(rs1)}";
            behavior: {
               X[rd] = (unsigned)X[rs1][15:0];
            }
        }
        CV_SLET {
            encoding: 7'b0101001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.slet}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
               X[rd] = (signed) X[rs1] <= (signed) X[rs2] ? 1 : 0;
            }
        }
        CV_SLETU {
            encoding: 7'b0101010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{cv.sletu}, {name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
               X[rd] = (unsigned) X[rs1] <= (unsigned) X[rs2] ? 1 : 0;
            }
        }
        CV_SUBN {
	    encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.subn}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              X[rd] = ((signed)(X[rs1] - X[rs2])) >> Is3;
            }
        }
        CV_SUBRN {
            encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.subrn}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
	       X[rd] = ((signed)(X[rs1] - X[rs2] + 2^(Is3 - 1))) >> Is3;
            }
        }
        CV_SUBUN {
            encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.subun}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              X[rd] = (unsigned)(X[rs1] - X[rs2]) >> Is3;
            }
        }
        CV_SUBURN {
            encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
            assembly:"{cv.suburn}, {name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
            behavior: {
              X[rd] = (unsigned)(X[rs1] - X[rs2] + 2^(Is3 - 1)) >> Is3;
            }
        }
    }
}

InstructionSet XCoreVHwlp extends RISCVBase {
    instructions {

    }
}

InstructionSet XCoreVBitmanip extends RISCVBase {
    instructions {

    }
}

InstructionSet XCoreVSimd extends RISCVBase {
    instructions {
	CV_ADD_H {
		encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] + X[rs2][15: 0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] + X[rs2][31:16])[15:0];
			}
		}
	}
	CV_ADD_SC_H {
		encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] + X[rs2][15:0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] + X[rs2][15:0])[15:0];
			}
		}
	}
	CV_ADD_SCI_H {
		encoding: 5'b00000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] + ((unsigned<16>)((signed)Imm6)))[15:0];
				X[rd][31:16] = (X[rs1][31:16] + ((unsigned<16>)((signed)Imm6)))[15:0];
			}
		}
	}
	CV_ADD_B {
		encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] + X[rs2][ 7: 0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] + X[rs2][15: 8])[7:0];
				X[rd][23:16] = (X[rs1][23:16] + X[rs2][23:16])[7:0];
				X[rd][31:24] = (X[rs1][31:24] + X[rs2][31:24])[7:0];
			}
		}
	}
	CV_ADD_SC_B {
		encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] + X[rs2][7:0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] + X[rs2][7:0])[7:0];
				X[rd][23:16] = (X[rs1][23:16] + X[rs2][7:0])[7:0];
				X[rd][31:24] = (X[rs1][31:24] + X[rs2][7:0])[7:0];
			}
		}
	}
	CV_ADD_SCI_B {
		encoding: 5'b00000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] + ((unsigned<8>)Imm6))[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] + ((unsigned<8>)Imm6))[7:0];
				X[rd][23:16] = (X[rs1][23:16] + ((unsigned<8>)Imm6))[7:0];
				X[rd][31:24] = (X[rs1][31:24] + ((unsigned<8>)Imm6))[7:0];
			}
		}
	}
	CV_ADD_DIV2 {
		encoding: 5'b01011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 1)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 1)[15:0];
			}
		}
	}
	CV_ADD_DIV4 {
		encoding: 5'b01011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 2)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 2)[15:0];
			}
		}
	}
	CV_ADD_DIV8 {
		encoding: 5'b01011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 3)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 3)[15:0];
			}
		}
	}
	CV_SUB_H {
		encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] - X[rs2][15: 0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] - X[rs2][31:16])[15:0];
			}
		}
	}
	CV_SUB_SC_H {
		encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] - X[rs2][15:0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] - X[rs2][15:0])[15:0];
			}
		}
	}
	CV_SUB_SCI_H {
		encoding: 5'b00001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] - ((unsigned<16>)((signed)Imm6)))[15:0];
				X[rd][31:16] = (X[rs1][31:16] - ((unsigned<16>)((signed)Imm6)))[15:0];
			}
		}
	}
	CV_SUB_B {
		encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] - X[rs2][ 7: 0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] - X[rs2][15: 8])[7:0];
				X[rd][23:16] = (X[rs1][23:16] - X[rs2][23:16])[7:0];
				X[rd][31:24] = (X[rs1][31:24] - X[rs2][31:24])[7:0];
			}
		}
	}
	CV_SUB_SC_B {
		encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] - X[rs2][7:0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] - X[rs2][7:0])[7:0];
				X[rd][23:16] = (X[rs1][23:16] - X[rs2][7:0])[7:0];
				X[rd][31:24] = (X[rs1][31:24] - X[rs2][7:0])[7:0];
			}
		}
	}
	CV_SUB_SCI_B {
		encoding: 5'b00001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] - ((unsigned<8>)Imm6))[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] - ((unsigned<8>)Imm6))[7:0];
				X[rd][23:16] = (X[rs1][23:16] - ((unsigned<8>)Imm6))[7:0];
				X[rd][31:24] = (X[rs1][31:24] - ((unsigned<8>)Imm6))[7:0];
			}
		}
	}
	CV_SUB_DIV2 {
		encoding: 5'b01100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] - X[rs2][15: 0]) >> 1)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] - X[rs2][31:16]) >> 1)[15:0];
			}
		}
	}
	CV_SUB_DIV4 {
		encoding: 5'b01100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] - X[rs2][15: 0]) >> 2)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] - X[rs2][31:16]) >> 2)[15:0];
			}
		}
	}
	CV_SUB_DIV8 {
		encoding: 5'b01100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] - X[rs2][15: 0]) >> 3)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] - X[rs2][31:16]) >> 3)[15:0];
			}
		}
	}
	CV_AVG_H {
		encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 1)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 1)[15:0];
			}
		}
	}
	CV_AVG_SC_H {
		encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15:0]) >> 1)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][15:0]) >> 1)[15:0];
			}
		}
	}
	CV_AVG_SCI_H {
		encoding: 5'b00010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)(X[rs1][15: 0] + ((unsigned<16>)((signed)Imm6))) >> 1)[15:0];
				X[rd][31:16] = ((signed)(X[rs1][31:16] + ((unsigned<16>)((signed)Imm6))) >> 1)[15:0];
			}
		}
	}
	CV_AVG_B {
		encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = ((signed)(X[rs1][ 7: 0] + X[rs2][ 7: 0]) >> 1)[7:0];
				X[rd][15: 8] = ((signed)(X[rs1][15: 8] + X[rs2][15: 8]) >> 1)[7:0];
				X[rd][23:16] = ((signed)(X[rs1][23:16] + X[rs2][23:16]) >> 1)[7:0];
				X[rd][31:24] = ((signed)(X[rs1][31:24] + X[rs2][31:24]) >> 1)[7:0];
			}
		}
	}
	CV_AVG_SC_B {
		encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = ((signed)(X[rs1][ 7: 0] + X[rs2][7:0]) >> 1)[7:0];
				X[rd][15: 8] = ((signed)(X[rs1][15: 8] + X[rs2][7:0]) >> 1)[7:0];
				X[rd][23:16] = ((signed)(X[rs1][23:16] + X[rs2][7:0]) >> 1)[7:0];
				X[rd][31:24] = ((signed)(X[rs1][31:24] + X[rs2][7:0]) >> 1)[7:0];
			}
		}
	}
	CV_AVG_SCI_B {
		encoding: 5'b00010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = ((signed)(X[rs1][ 7: 0] + ((unsigned<8>)Imm6)) >> 1)[7:0];
				X[rd][15: 8] = ((signed)(X[rs1][15: 8] + ((unsigned<8>)Imm6)) >> 1)[7:0];
				X[rd][23:16] = ((signed)(X[rs1][23:16] + ((unsigned<8>)Imm6)) >> 1)[7:0];
				X[rd][31:24] = ((signed)(X[rs1][31:24] + ((unsigned<8>)Imm6)) >> 1)[7:0];
			}
		}
	}
	CV_AVGU_H {
		encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((unsigned)(X[rs1][15: 0] + X[rs2][15: 0]) >> 1)[15:0];
				X[rd][31:16] = ((unsigned)(X[rs1][31:16] + X[rs2][31:16]) >> 1)[15:0];
			}
		}
	}
	CV_AVGU_SC_H {
		encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((unsigned)(X[rs1][15: 0] + X[rs2][15:0]) >> 1)[15:0];
				X[rd][31:16] = ((unsigned)(X[rs1][31:16] + X[rs2][15:0]) >> 1)[15:0];
			}
		}
	}
	CV_AVGU_SCI_H {
		encoding: 5'b00011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((unsigned)(X[rs1][15: 0] + ((unsigned<16>)((signed)Imm6))) >> 1)[15:0];
				X[rd][31:16] = ((unsigned)(X[rs1][31:16] + ((unsigned<16>)((signed)Imm6))) >> 1)[15:0];
			}
		}
	}
	CV_AVGU_B {
		encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = ((unsigned)(X[rs1][ 7: 0] + X[rs2][ 7: 0]) >> 1)[7:0];
				X[rd][15: 8] = ((unsigned)(X[rs1][15: 8] + X[rs2][15: 8]) >> 1)[7:0];
				X[rd][23:16] = ((unsigned)(X[rs1][23:16] + X[rs2][23:16]) >> 1)[7:0];
				X[rd][31:24] = ((unsigned)(X[rs1][31:24] + X[rs2][31:24]) >> 1)[7:0];
			}
		}
	}
	CV_AVGU_SC_B {
		encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = ((unsigned)(X[rs1][ 7: 0] + X[rs2][7:0]) >> 1)[7:0];
				X[rd][15: 8] = ((unsigned)(X[rs1][15: 8] + X[rs2][7:0]) >> 1)[7:0];
				X[rd][23:16] = ((unsigned)(X[rs1][23:16] + X[rs2][7:0]) >> 1)[7:0];
				X[rd][31:24] = ((unsigned)(X[rs1][31:24] + X[rs2][7:0]) >> 1)[7:0];
			}
		}
	}
	CV_AVGU_SCI_B {
		encoding: 5'b00011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = ((unsigned)(X[rs1][ 7: 0] + ((unsigned<8>)Imm6)) >> 1)[7:0];
				X[rd][15: 8] = ((unsigned)(X[rs1][15: 8] + ((unsigned<8>)Imm6)) >> 1)[7:0];
				X[rd][23:16] = ((unsigned)(X[rs1][23:16] + ((unsigned<8>)Imm6)) >> 1)[7:0];
				X[rd][31:24] = ((unsigned)(X[rs1][31:24] + ((unsigned<8>)Imm6)) >> 1)[7:0];
			}
		}
	}
	CV_MIN_H {
		encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MIN_SC_H {
		encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MIN_SCI_H {
		encoding: 5'b00100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_MIN_B {
		encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MIN_SC_B {
		encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MIN_SCI_B {
		encoding: 5'b00100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_MINU_H {
		encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MINU_SC_H {
		encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MINU_SCI_H {
		encoding: 5'b00101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_MINU_B {
		encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MINU_SC_B {
		encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MINU_SCI_B {
		encoding: 5'b00101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_MAX_H {
		encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAX_SC_H {
		encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAX_SCI_H {
		encoding: 5'b00110 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_MAX_B {
		encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAX_SC_B {
		encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAX_SCI_B {
		encoding: 5'b00110 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_MAXU_H {
		encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAXU_SC_H {
		encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAXU_SCI_H {
		encoding: 5'b00111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_MAXU_B {
		encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAXU_SC_B {
		encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_MAXU_SCI_B {
		encoding: 5'b00111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			// TODO
		}
	}
	CV_SRL_H {
		encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (X[rs2][15: 0][3:0]);
				X[rd][31:16] = (unsigned)X[rs1][31:16] >> (X[rs2][31:16][3:0]);
			}
		}
	}
	CV_SRL_SC_H {
		encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (X[rs2][15:0][3:0]);
				X[rd][31:16] = (unsigned)X[rs1][31:16] >> (X[rs2][15:0][3:0]);
			}
		}
	}
	CV_SRL_SCI_H {
		encoding: 5'b01000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (((unsigned<16>)((signed)Imm6))[3:0]);
				X[rd][31:16] = (unsigned)X[rs1][31:16] >> (((unsigned<16>)((signed)Imm6))[3:0]);
			}
		}
	}
	CV_SRL_B {
		encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (X[rs2][ 7: 0][2:0]);
				X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (X[rs2][15: 8][2:0]);
				X[rd][23:16] = (unsigned)X[rs1][23:16] >> (X[rs2][23:16][2:0]);
				X[rd][31:24] = (unsigned)X[rs1][31:24] >> (X[rs2][31:24][2:0]);
			}
		}
	}
	CV_SRL_SC_B {
		encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (X[rs2][7:0][2:0]);
				X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (X[rs2][7:0][2:0]);
				X[rd][23:16] = (unsigned)X[rs1][23:16] >> (X[rs2][7:0][2:0]);
				X[rd][31:24] = (unsigned)X[rs1][31:24] >> (X[rs2][7:0][2:0]);
			}
		}
	}
	CV_SRL_SCI_B {
		encoding: 5'b01000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][23:16] = (unsigned)X[rs1][23:16] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][31:24] = (unsigned)X[rs1][31:24] >> (((unsigned<8>)Imm6)[2:0]);
			}
		}
	}
	CV_SRA_H {
		encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (signed)X[rs1][15: 0] >> (X[rs2][15: 0][3:0]);
				X[rd][31:16] = (signed)X[rs1][31:16] >> (X[rs2][31:16][3:0]);
			}
		}
	}
	CV_SRA_SC_H {
		encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (signed)X[rs1][15: 0] >> (X[rs2][15:0][3:0]);
				X[rd][31:16] = (signed)X[rs1][31:16] >> (X[rs2][15:0][3:0]);
			}
		}
	}
	CV_SRA_SCI_H {
		encoding: 5'b01001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (signed)X[rs1][15: 0] >> (((unsigned<16>)((signed)Imm6))[3:0]);
				X[rd][31:16] = (signed)X[rs1][31:16] >> (((unsigned<16>)((signed)Imm6))[3:0]);
			}
		}
	}
	CV_SRA_B {
		encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (signed)X[rs1][ 7: 0] >> (X[rs2][ 7: 0][2:0]);
				X[rd][15: 8] = (signed)X[rs1][15: 8] >> (X[rs2][15: 8][2:0]);
				X[rd][23:16] = (signed)X[rs1][23:16] >> (X[rs2][23:16][2:0]);
				X[rd][31:24] = (signed)X[rs1][31:24] >> (X[rs2][31:24][2:0]);
			}
		}
	}
	CV_SRA_SC_B {
		encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (signed)X[rs1][ 7: 0] >> (X[rs2][7:0][2:0]);
				X[rd][15: 8] = (signed)X[rs1][15: 8] >> (X[rs2][7:0][2:0]);
				X[rd][23:16] = (signed)X[rs1][23:16] >> (X[rs2][7:0][2:0]);
				X[rd][31:24] = (signed)X[rs1][31:24] >> (X[rs2][7:0][2:0]);
			}
		}
	}
	CV_SRA_SCI_B {
		encoding: 5'b01001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (signed)X[rs1][ 7: 0] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][15: 8] = (signed)X[rs1][15: 8] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][23:16] = (signed)X[rs1][23:16] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][31:24] = (signed)X[rs1][31:24] >> (((unsigned<8>)Imm6)[2:0]);
			}
		}
	}
	CV_SLL_H {
		encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (X[rs2][15: 0][3:0]);
				X[rd][31:16] = (unsigned)X[rs1][31:16] >> (X[rs2][31:16][3:0]);
			}
		}
	}
	CV_SLL_SC_H {
		encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (X[rs2][15:0][3:0]);
				X[rd][31:16] = (unsigned)X[rs1][31:16] >> (X[rs2][15:0][3:0]);
			}
		}
	}
	CV_SLL_SCI_H {
		encoding: 5'b01010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (((unsigned<16>)((signed)Imm6))[3:0]);
				X[rd][31:16] = (unsigned)X[rs1][31:16] >> (((unsigned<16>)((signed)Imm6))[3:0]);
			}
		}
	}
	CV_SLL_B {
		encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (X[rs2][ 7: 0][2:0]);
				X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (X[rs2][15: 8][2:0]);
				X[rd][23:16] = (unsigned)X[rs1][23:16] >> (X[rs2][23:16][2:0]);
				X[rd][31:24] = (unsigned)X[rs1][31:24] >> (X[rs2][31:24][2:0]);
			}
		}
	}
	CV_SLL_SC_B {
		encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (X[rs2][7:0][2:0]);
				X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (X[rs2][7:0][2:0]);
				X[rd][23:16] = (unsigned)X[rs1][23:16] >> (X[rs2][7:0][2:0]);
				X[rd][31:24] = (unsigned)X[rs1][31:24] >> (X[rs2][7:0][2:0]);
			}
		}
	}
	CV_SLL_SCI_B {
		encoding: 5'b01010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][23:16] = (unsigned)X[rs1][23:16] >> (((unsigned<8>)Imm6)[2:0]);
				X[rd][31:24] = (unsigned)X[rs1][31:24] >> (((unsigned<8>)Imm6)[2:0]);
			}
		}
	}
	CV_OR_H {
		encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] | X[rs2][15: 0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] | X[rs2][31:16])[15:0];
			}
		}
	}
	CV_OR_SC_H {
		encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] | X[rs2][15:0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] | X[rs2][15:0])[15:0];
			}
		}
	}
	CV_OR_SCI_H {
		encoding: 5'b01011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] | ((unsigned<16>)((signed)Imm6)))[15:0];
				X[rd][31:16] = (X[rs1][31:16] | ((unsigned<16>)((signed)Imm6)))[15:0];
			}
		}
	}
	CV_OR_B {
		encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] | X[rs2][ 7: 0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] | X[rs2][15: 8])[7:0];
				X[rd][23:16] = (X[rs1][23:16] | X[rs2][23:16])[7:0];
				X[rd][31:24] = (X[rs1][31:24] | X[rs2][31:24])[7:0];
			}
		}
	}
	CV_OR_SC_B {
		encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] | X[rs2][7:0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] | X[rs2][7:0])[7:0];
				X[rd][23:16] = (X[rs1][23:16] | X[rs2][7:0])[7:0];
				X[rd][31:24] = (X[rs1][31:24] | X[rs2][7:0])[7:0];
			}
		}
	}
	CV_OR_SCI_B {
		encoding: 5'b01011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] | ((unsigned<8>)Imm6))[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] | ((unsigned<8>)Imm6))[7:0];
				X[rd][23:16] = (X[rs1][23:16] | ((unsigned<8>)Imm6))[7:0];
				X[rd][31:24] = (X[rs1][31:24] | ((unsigned<8>)Imm6))[7:0];
			}
		}
	}
	CV_XOR_H {
		encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] ^ X[rs2][15: 0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] ^ X[rs2][31:16])[15:0];
			}
		}
	}
	CV_XOR_SC_H {
		encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] ^ X[rs2][15:0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] ^ X[rs2][15:0])[15:0];
			}
		}
	}
	CV_XOR_SCI_H {
		encoding: 5'b01100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] ^ ((unsigned<16>)((signed)Imm6)))[15:0];
				X[rd][31:16] = (X[rs1][31:16] ^ ((unsigned<16>)((signed)Imm6)))[15:0];
			}
		}
	}
	CV_XOR_B {
		encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] ^ X[rs2][ 7: 0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] ^ X[rs2][15: 8])[7:0];
				X[rd][23:16] = (X[rs1][23:16] ^ X[rs2][23:16])[7:0];
				X[rd][31:24] = (X[rs1][31:24] ^ X[rs2][31:24])[7:0];
			}
		}
	}
	CV_XOR_SC_B {
		encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] ^ X[rs2][7:0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] ^ X[rs2][7:0])[7:0];
				X[rd][23:16] = (X[rs1][23:16] ^ X[rs2][7:0])[7:0];
				X[rd][31:24] = (X[rs1][31:24] ^ X[rs2][7:0])[7:0];
			}
		}
	}
	CV_XOR_SCI_B {
		encoding: 5'b01100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] ^ ((unsigned<8>)Imm6))[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] ^ ((unsigned<8>)Imm6))[7:0];
				X[rd][23:16] = (X[rs1][23:16] ^ ((unsigned<8>)Imm6))[7:0];
				X[rd][31:24] = (X[rs1][31:24] ^ ((unsigned<8>)Imm6))[7:0];
			}
		}
	}
	CV_AND_H {
		encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] & X[rs2][15: 0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] & X[rs2][31:16])[15:0];
			}
		}
	}
	CV_AND_SC_H {
		encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] & X[rs2][15:0])[15:0];
				X[rd][31:16] = (X[rs1][31:16] & X[rs2][15:0])[15:0];
			}
		}
	}
	CV_AND_SCI_H {
		encoding: 5'b01101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs1][15: 0] & ((unsigned<16>)((signed)Imm6)))[15:0];
				X[rd][31:16] = (X[rs1][31:16] & ((unsigned<16>)((signed)Imm6)))[15:0];
			}
		}
	}
	CV_AND_B {
		encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] & X[rs2][ 7: 0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] & X[rs2][15: 8])[7:0];
				X[rd][23:16] = (X[rs1][23:16] & X[rs2][23:16])[7:0];
				X[rd][31:24] = (X[rs1][31:24] & X[rs2][31:24])[7:0];
			}
		}
	}
	CV_AND_SC_B {
		encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] & X[rs2][7:0])[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] & X[rs2][7:0])[7:0];
				X[rd][23:16] = (X[rs1][23:16] & X[rs2][7:0])[7:0];
				X[rd][31:24] = (X[rs1][31:24] & X[rs2][7:0])[7:0];
			}
		}
	}
	CV_AND_SCI_B {
		encoding: 5'b01101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs1][ 7: 0] & ((unsigned<8>)Imm6))[7:0];
				X[rd][15: 8] = (X[rs1][15: 8] & ((unsigned<8>)Imm6))[7:0];
				X[rd][23:16] = (X[rs1][23:16] & ((unsigned<8>)Imm6))[7:0];
				X[rd][31:24] = (X[rs1][31:24] & ((unsigned<8>)Imm6))[7:0];
			}
		}
	}
	CV_ABS_H {
		encoding: 5'b01110 :: 1'b0 :: 1'b0 :: 5'b00000 :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			// TODO
		}
	}
	CV_ABS_B {
		encoding: 5'b01110 :: 1'b0 :: 1'b0 :: 5'b00000 :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			// TODO
		}
	}
	CV_EXTRACT_H {
		encoding: 5'b01111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned<32>)((signed)X[rs1][Imm6[0]*16+15 : Imm6[0]*16]);
			}
		}
	}
	CV_EXTRACT_B {
		encoding: 5'b01111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned<32>)((signed)X[rs1][Imm6[1:0]*8+7 : Imm6[1:0]*8]);
			}
		}
	}
	CV_EXTRACTU_H {
		encoding: 5'b10010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned<32>)(X[rs1][Imm6[0]*16+15 : Imm6[0]*16]);
			}
		}
	}
	CV_EXTRACTU_B {
		encoding: 5'b10010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned<32>)(X[rs1][Imm6[1:0]*8+7 : Imm6[1:0]*8]);
			}
		}
	}
	CV_INSERT_H {
		encoding: 5'b10110 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][Imm6[0]*16+15 : Imm6[0]*16] = X[rs1][15: 0];
			}
		}
	}
	CV_INSERT_B {
		encoding: 5'b10110 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][Imm6[1:0]*8+7 : Imm6[1:0]*8] = X[rs1][ 7: 0];
			}
		}
	}
	CV_DOTUP_H {
		encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15: 0]) +
				((unsigned)X[rs1][31:16] * (unsigned)X[rs2][31:16])));
		}
	}
	CV_DOTUP_SC_H {
		encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15:0]) +
				((unsigned)X[rs1][31:16] * (unsigned)X[rs2][15:0])));
		}
	}
	CV_DOTUP_SCI_H {
		encoding: 5'b10000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][15: 0] * (unsigned)((unsigned<16>)((signed)Imm6))) +
				((unsigned)X[rs1][31:16] * (unsigned)((unsigned<16>)((signed)Imm6)))));
		}
	}
	CV_DOTUP_B {
		encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][ 7: 0]) +
				((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][15: 8]) +
				((unsigned)X[rs1][23:16] * (unsigned)X[rs2][23:16]) +
				((unsigned)X[rs1][31:24] * (unsigned)X[rs2][31:24])));
		}
	}
	CV_DOTUP_SC_B {
		encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][7:0]) +
				((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][7:0]) +
				((unsigned)X[rs1][23:16] * (unsigned)X[rs2][7:0]) +
				((unsigned)X[rs1][31:24] * (unsigned)X[rs2][7:0])));
		}
	}
	CV_DOTUP_SCI_B {
		encoding: 5'b10000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][ 7: 0] * (unsigned)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][15: 8] * (unsigned)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][23:16] * (unsigned)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][31:24] * (unsigned)((unsigned<8>)Imm6))));
		}
	}
	CV_DOTUSP_H {
		encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
				((unsigned)X[rs1][31:16] * (signed)X[rs2][31:16])));
		}
	}
	CV_DOTUSP_SC_H {
		encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
				((unsigned)X[rs1][31:16] * (signed)X[rs2][15:0])));
		}
	}
	CV_DOTUSP_SCI_H {
		encoding: 5'b10001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
				((unsigned)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
		}
	}
	CV_DOTUSP_B {
		encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
				((unsigned)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
				((unsigned)X[rs1][23:16] * (signed)X[rs2][23:16]) +
				((unsigned)X[rs1][31:24] * (signed)X[rs2][31:24])));
		}
	}
	CV_DOTUSP_SC_B {
		encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
				((unsigned)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
				((unsigned)X[rs1][23:16] * (signed)X[rs2][7:0]) +
				((unsigned)X[rs1][31:24] * (signed)X[rs2][7:0])));
		}
	}
	CV_DOTUSP_SCI_B {
		encoding: 5'b10001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				((unsigned)X[rs1][ 7: 0] * (signed)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][15: 8] * (signed)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][23:16] * (signed)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][31:24] * (signed)((unsigned<8>)Imm6))));
		}
	}
	CV_DOTSP_H {
		encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
				((signed)X[rs1][31:16] * (signed)X[rs2][31:16])));
		}
	}
	CV_DOTSP_SC_H {
		encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				((signed)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
				((signed)X[rs1][31:16] * (signed)X[rs2][15:0])));
		}
	}
	CV_DOTSP_SCI_H {
		encoding: 5'b10011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				((signed)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
				((signed)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
		}
	}
	CV_DOTSP_B {
		encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				((signed)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
				((signed)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
				((signed)X[rs1][23:16] * (signed)X[rs2][23:16]) +
				((signed)X[rs1][31:24] * (signed)X[rs2][31:24])));
		}
	}
	CV_DOTSP_SC_B {
		encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				((signed)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
				((signed)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
				((signed)X[rs1][23:16] * (signed)X[rs2][7:0]) +
				((signed)X[rs1][31:24] * (signed)X[rs2][7:0])));
		}
	}
	CV_DOTSP_SCI_B {
		encoding: 5'b10011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				((signed)X[rs1][ 7: 0] * (signed)((unsigned<8>)Imm6)) +
				((signed)X[rs1][15: 8] * (signed)((unsigned<8>)Imm6)) +
				((signed)X[rs1][23:16] * (signed)((unsigned<8>)Imm6)) +
				((signed)X[rs1][31:24] * (signed)((unsigned<8>)Imm6))));
		}
	}
	CV_SDOTUP_H {
		encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15: 0]) +
				((unsigned)X[rs1][31:16] * (unsigned)X[rs2][31:16])));
		}
	}
	CV_SDOTUP_SC_H {
		encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15:0]) +
				((unsigned)X[rs1][31:16] * (unsigned)X[rs2][15:0])));
		}
	}
	CV_SDOTUP_SCI_H {
		encoding: 5'b10100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][15: 0] * (unsigned)((unsigned<16>)((signed)Imm6))) +
				((unsigned)X[rs1][31:16] * (unsigned)((unsigned<16>)((signed)Imm6)))));
		}
	}
	CV_SDOTUP_B {
		encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][ 7: 0]) +
				((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][15: 8]) +
				((unsigned)X[rs1][23:16] * (unsigned)X[rs2][23:16]) +
				((unsigned)X[rs1][31:24] * (unsigned)X[rs2][31:24])));
		}
	}
	CV_SDOTUP_SC_B {
		encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][7:0]) +
				((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][7:0]) +
				((unsigned)X[rs1][23:16] * (unsigned)X[rs2][7:0]) +
				((unsigned)X[rs1][31:24] * (unsigned)X[rs2][7:0])));
		}
	}
	CV_SDOTUP_SCI_B {
		encoding: 5'b10100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][ 7: 0] * (unsigned)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][15: 8] * (unsigned)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][23:16] * (unsigned)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][31:24] * (unsigned)((unsigned<8>)Imm6))));
		}
	}
	CV_SDOTUSP_H {
		encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
				((unsigned)X[rs1][31:16] * (signed)X[rs2][31:16])));
		}
	}
	CV_SDOTUSP_SC_H {
		encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
				((unsigned)X[rs1][31:16] * (signed)X[rs2][15:0])));
		}
	}
	CV_SDOTUSP_SCI_H {
		encoding: 5'b10101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
				((unsigned)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
		}
	}
	CV_SDOTUSP_B {
		encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
				((unsigned)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
				((unsigned)X[rs1][23:16] * (signed)X[rs2][23:16]) +
				((unsigned)X[rs1][31:24] * (signed)X[rs2][31:24])));
		}
	}
	CV_SDOTUSP_SC_B {
		encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
				((unsigned)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
				((unsigned)X[rs1][23:16] * (signed)X[rs2][7:0]) +
				((unsigned)X[rs1][31:24] * (signed)X[rs2][7:0])));
		}
	}
	CV_SDOTUSP_SCI_B {
		encoding: 5'b10101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((
				X[rd] +
				((unsigned)X[rs1][ 7: 0] * (signed)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][15: 8] * (signed)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][23:16] * (signed)((unsigned<8>)Imm6)) +
				((unsigned)X[rs1][31:24] * (signed)((unsigned<8>)Imm6))));
		}
	}
	CV_SDOTSP_H {
		encoding: 5'b10111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				X[rd] +
				((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
				((signed)X[rs1][31:16] * (signed)X[rs2][31:16])));
		}
	}
	CV_SDOTSP_SC_H {
		encoding: 5'b10111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				X[rd] +
				((signed)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
				((signed)X[rs1][31:16] * (signed)X[rs2][15:0])));
		}
	}
	CV_SDOTSP_SCI_H {
		encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				X[rd] +
				((signed)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
				((signed)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
		}
	}
	CV_SDOTSP_B {
		encoding: 5'b10111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				X[rd] +
				((signed)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
				((signed)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
				((signed)X[rs1][23:16] * (signed)X[rs2][23:16]) +
				((signed)X[rs1][31:24] * (signed)X[rs2][31:24])));
		}
	}
	CV_SDOTSP_SC_B {
		encoding: 5'b10111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				X[rd] +
				((signed)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
				((signed)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
				((signed)X[rs1][23:16] * (signed)X[rs2][7:0]) +
				((signed)X[rs1][31:24] * (signed)X[rs2][7:0])));
		}
	}
	CV_SDOTSP_SCI_B {
		encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) X[rd] = (unsigned<32>)((signed)(
				X[rd] +
				((signed)X[rs1][ 7: 0] * (signed)((unsigned<8>)Imm6)) +
				((signed)X[rs1][15: 8] * (signed)((unsigned<8>)Imm6)) +
				((signed)X[rs1][23:16] * (signed)((unsigned<8>)Imm6)) +
				((signed)X[rs1][31:24] * (signed)((unsigned<8>)Imm6))));
		}
	}
	CV_SHUFFLE_H {
		encoding: 5'b11000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = X[rs1][(X[rs2][15: 0][0]*16+15) : (X[rs2][15: 0][0]*16)];
				X[rd][31:16] = X[rs1][(X[rs2][31:16][0]*16+15) : (X[rs2][31:16][0]*16)];
			}
		}
	}
	CV_SHUFFLE_SCI_H {
		encoding: 5'b11000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = X[rs1][(Imm6[0]*16+15) : (Imm6[0]*16)];
				X[rd][31:16] = X[rs1][(Imm6[1]*16+15) : (Imm6[1]*16)];
			}
		}
	}
	CV_SHUFFLE_B {
		encoding: 5'b11000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = X[rs1][(X[rs2][ 7: 0][1:0]*8+7) : (X[rs2][ 7: 0][1:0]*8)];
				X[rd][15: 8] = X[rs1][(X[rs2][15: 8][1:0]*8+7) : (X[rs2][15: 8][1:0]*8)];
				X[rd][23:16] = X[rs1][(X[rs2][23:16][1:0]*8+7) : (X[rs2][23:16][1:0]*8)];
				X[rd][31:24] = X[rs1][(X[rs2][31:24][1:0]*8+7) : (X[rs2][31:24][1:0]*8)];
			}
		}
	}
	CV_SHUFFLEI0_SCI_B {
		encoding: 5'b11000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8+7 : Imm6[1:0]*8];
				X[rd][15: 8] = X[rs1][Imm6[3:2]*8+7 : Imm6[3:2]*8];
				X[rd][23:16] = X[rs1][Imm6[5:4]*8+7 : Imm6[5:4]*8];
				X[rd][31:24] = X[rs1][ 7: 0];
			}
		}
	}
	CV_SHUFFLEI1_SCI_B {
		encoding: 5'b11101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8+7 : Imm6[1:0]*8];
				X[rd][15: 8] = X[rs1][Imm6[3:2]*8+7 : Imm6[3:2]*8];
				X[rd][23:16] = X[rs1][Imm6[5:4]*8+7 : Imm6[5:4]*8];
				X[rd][31:24] = X[rs1][15: 8];
			}
		}
	}
	CV_SHUFFLEI2_SCI_B {
		encoding: 5'b11110 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8+7 : Imm6[1:0]*8];
				X[rd][15: 8] = X[rs1][Imm6[3:2]*8+7 : Imm6[3:2]*8];
				X[rd][23:16] = X[rs1][Imm6[5:4]*8+7 : Imm6[5:4]*8];
				X[rd][31:24] = X[rs1][23:16];
			}
		}
	}
	CV_SHUFFLEI3_SCI_B {
		encoding: 5'b11111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8+7 : Imm6[1:0]*8];
				X[rd][15: 8] = X[rs1][Imm6[3:2]*8+7 : Imm6[3:2]*8];
				X[rd][23:16] = X[rs1][Imm6[5:4]*8+7 : Imm6[5:4]*8];
				X[rd][31:24] = X[rs1][31:24];
			}
		}
	}
	CV_SHUFFLE2_H {
		encoding: 5'b11001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (X[rs2][15: 0][1] ? X[rs1] : X[rd])[(X[rs2][15: 0][0]*16+15) : (X[rs2][15: 0][0]*16)];
				X[rd][31:16] = (X[rs2][31:16][1] ? X[rs1] : X[rd])[(X[rs2][31:16][0]*16+15) : (X[rs2][31:16][0]*16)];
			}
		}
	}
	CV_SHUFFLE2_B {
		encoding: 5'b11001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (X[rs2][ 7: 0][1] ? X[rs1] : X[rd])[(X[rs2][ 7: 0][0]*8+7) : (X[rs2][ 7: 0][0]*8)];
				X[rd][15: 8] = (X[rs2][15: 8][1] ? X[rs1] : X[rd])[(X[rs2][15: 8][0]*8+7) : (X[rs2][15: 8][0]*8)];
				X[rd][23:16] = (X[rs2][23:16][1] ? X[rs1] : X[rd])[(X[rs2][23:16][0]*8+7) : (X[rs2][23:16][0]*8)];
				X[rd][31:24] = (X[rs2][31:24][1] ? X[rs1] : X[rd])[(X[rs2][31:24][0]*8+7) : (X[rs2][31:24][0]*8)];
			}
		}
	}
	CV_PACK {
		encoding: 5'b11010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = X[rs1][15: 0];
				X[rd][15: 0] = X[rs2][15: 0];
			}
		}
	}
	CV_PACK_H {
		encoding: 5'b11010 :: 1'b0 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = X[rs1][31:16];
				X[rd][15: 0] = X[rs2][31:16];
			}
		}
	}
	CV_PACKHI_B {
		encoding: 5'b11011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:24] = X[rs1][ 7: 0];
				X[rd][23:16] = X[rs2][ 7: 0];
			}
		}
	}
	CV_PACKLO_B {
		encoding: 5'b11100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 8] = X[rs1][ 7: 0];
				X[rd][ 7: 0] = X[rs2][ 7: 0];
			}
		}
	}
// SOURCE FILE: instr_srcs/XCoreVSIMD_Comparison.txt
	CV_CMPEQ_H {
		encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] == X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] == X[rs2][31:16]));
			}
		}
	}
	CV_CMPEQ_SC_H {
		encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] == X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] == X[rs2][15:0]));
			}
		}
	}
	CV_CMPEQ_SCI_H {
		encoding: 5'b00000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] == ((unsigned<16>)((signed)Imm6))));
				X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] == ((unsigned<16>)((signed)Imm6))));
			}
		}
	}
	CV_CMPEQ_B {
		encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] == X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] == X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] == X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] == X[rs2][31:24]));
			}
		}
	}
	CV_CMPEQ_SC_B {
		encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] == X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] == X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] == X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] == X[rs2][7:0]));
			}
		}
	}
	CV_CMPEQ_SCI_B {
		encoding: 5'b00000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] == ((unsigned<8>)((signed)Imm6))));
				X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] == ((unsigned<8>)((signed)Imm6))));
				X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] == ((unsigned<8>)((signed)Imm6))));
				X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] == ((unsigned<8>)((signed)Imm6))));
			}
		}
	}
	CV_CMPNE_H {
		encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] != X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] != X[rs2][31:16]));
			}
		}
	}
	CV_CMPNE_SC_H {
		encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] != X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] != X[rs2][15:0]));
			}
		}
	}
	CV_CMPNE_SCI_H {
		encoding: 5'b00001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] != ((unsigned<16>)((signed)Imm6))));
				X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] != ((unsigned<16>)((signed)Imm6))));
			}
		}
	}
	CV_CMPNE_B {
		encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] != X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] != X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] != X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] != X[rs2][31:24]));
			}
		}
	}
	CV_CMPNE_SC_B {
		encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] != X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] != X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] != X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] != X[rs2][7:0]));
			}
		}
	}
	CV_CMPNE_SCI_B {
		encoding: 5'b00001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] != ((unsigned<8>)((signed)Imm6))));
				X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] != ((unsigned<8>)((signed)Imm6))));
				X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] != ((unsigned<8>)((signed)Imm6))));
				X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] != ((unsigned<8>)((signed)Imm6))));
			}
		}
	}
	CV_CMPGT_H {
		encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] > (signed)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] > (signed)X[rs2][31:16]));
			}
		}
	}
	CV_CMPGT_SC_H {
		encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] > (signed)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] > (signed)X[rs2][15:0]));
			}
		}
	}
	CV_CMPGT_SCI_H {
		encoding: 5'b00010 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] > (signed)((unsigned<16>)((signed)Imm6))));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] > (signed)((unsigned<16>)((signed)Imm6))));
			}
		}
	}
	CV_CMPGT_B {
		encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] > (signed)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] > (signed)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] > (signed)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] > (signed)X[rs2][31:24]));
			}
		}
	}
	CV_CMPGT_SC_B {
		encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] > (signed)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] > (signed)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] > (signed)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] > (signed)X[rs2][7:0]));
			}
		}
	}
	CV_CMPGT_SCI_B {
		encoding: 5'b00010 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] > (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] > (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] > (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] > (signed)((unsigned<8>)((signed)Imm6))));
			}
		}
	}
	CV_CMPGE_H {
		encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] >= (signed)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] >= (signed)X[rs2][31:16]));
			}
		}
	}
	CV_CMPGE_SC_H {
		encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] >= (signed)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] >= (signed)X[rs2][15:0]));
			}
		}
	}
	CV_CMPGE_SCI_H {
		encoding: 5'b00011 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] >= (signed)((unsigned<16>)((signed)Imm6))));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] >= (signed)((unsigned<16>)((signed)Imm6))));
			}
		}
	}
	CV_CMPGE_B {
		encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] >= (signed)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] >= (signed)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] >= (signed)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] >= (signed)X[rs2][31:24]));
			}
		}
	}
	CV_CMPGE_SC_B {
		encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] >= (signed)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] >= (signed)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] >= (signed)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] >= (signed)X[rs2][7:0]));
			}
		}
	}
	CV_CMPGE_SCI_B {
		encoding: 5'b00011 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] >= (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] >= (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] >= (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] >= (signed)((unsigned<8>)((signed)Imm6))));
			}
		}
	}
	CV_CMPLT_H {
		encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] < (signed)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] < (signed)X[rs2][31:16]));
			}
		}
	}
	CV_CMPLT_SC_H {
		encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] < (signed)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] < (signed)X[rs2][15:0]));
			}
		}
	}
	CV_CMPLT_SCI_H {
		encoding: 5'b00100 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] < (signed)((unsigned<16>)((signed)Imm6))));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] < (signed)((unsigned<16>)((signed)Imm6))));
			}
		}
	}
	CV_CMPLT_B {
		encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] < (signed)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] < (signed)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] < (signed)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] < (signed)X[rs2][31:24]));
			}
		}
	}
	CV_CMPLT_SC_B {
		encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] < (signed)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] < (signed)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] < (signed)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] < (signed)X[rs2][7:0]));
			}
		}
	}
	CV_CMPLT_SCI_B {
		encoding: 5'b00100 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] < (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] < (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] < (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] < (signed)((unsigned<8>)((signed)Imm6))));
			}
		}
	}
	CV_CMPLE_H {
		encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] <= (signed)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] <= (signed)X[rs2][31:16]));
			}
		}
	}
	CV_CMPLE_SC_H {
		encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] <= (signed)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] <= (signed)X[rs2][15:0]));
			}
		}
	}
	CV_CMPLE_SCI_H {
		encoding: 5'b00101 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] <= (signed)((unsigned<16>)((signed)Imm6))));
				X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] <= (signed)((unsigned<16>)((signed)Imm6))));
			}
		}
	}
	CV_CMPLE_B {
		encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] <= (signed)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] <= (signed)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] <= (signed)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] <= (signed)X[rs2][31:24]));
			}
		}
	}
	CV_CMPLE_SC_B {
		encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] <= (signed)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] <= (signed)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] <= (signed)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] <= (signed)X[rs2][7:0]));
			}
		}
	}
	CV_CMPLE_SCI_B {
		encoding: 5'b00101 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] <= (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] <= (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] <= (signed)((unsigned<8>)((signed)Imm6))));
				X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] <= (signed)((unsigned<8>)((signed)Imm6))));
			}
		}
	}
	CV_CMPGTU_H {
		encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] > (unsigned)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] > (unsigned)X[rs2][31:16]));
			}
		}
	}
	CV_CMPGTU_SC_H {
		encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] > (unsigned)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] > (unsigned)X[rs2][15:0]));
			}
		}
	}
	CV_CMPGTU_SCI_H {
		encoding: 5'b00110 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] > (unsigned)((unsigned<16>)Imm6)));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] > (unsigned)((unsigned<16>)Imm6)));
			}
		}
	}
	CV_CMPGTU_B {
		encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] > (unsigned)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] > (unsigned)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] > (unsigned)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] > (unsigned)X[rs2][31:24]));
			}
		}
	}
	CV_CMPGTU_SC_B {
		encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] > (unsigned)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] > (unsigned)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] > (unsigned)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] > (unsigned)X[rs2][7:0]));
			}
		}
	}
	CV_CMPGTU_SCI_B {
		encoding: 5'b00110 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] > (unsigned)((unsigned<8>)Imm6)));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] > (unsigned)((unsigned<8>)Imm6)));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] > (unsigned)((unsigned<8>)Imm6)));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] > (unsigned)((unsigned<8>)Imm6)));
			}
		}
	}
	CV_CMPGEU_H {
		encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] >= (unsigned)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] >= (unsigned)X[rs2][31:16]));
			}
		}
	}
	CV_CMPGEU_SC_H {
		encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] >= (unsigned)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] >= (unsigned)X[rs2][15:0]));
			}
		}
	}
	CV_CMPGEU_SCI_H {
		encoding: 5'b00111 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] >= (unsigned)((unsigned<16>)Imm6)));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] >= (unsigned)((unsigned<16>)Imm6)));
			}
		}
	}
	CV_CMPGEU_B {
		encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] >= (unsigned)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] >= (unsigned)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] >= (unsigned)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] >= (unsigned)X[rs2][31:24]));
			}
		}
	}
	CV_CMPGEU_SC_B {
		encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] >= (unsigned)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] >= (unsigned)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] >= (unsigned)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] >= (unsigned)X[rs2][7:0]));
			}
		}
	}
	CV_CMPGEU_SCI_B {
		encoding: 5'b00111 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] >= (unsigned)((unsigned<8>)Imm6)));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] >= (unsigned)((unsigned<8>)Imm6)));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] >= (unsigned)((unsigned<8>)Imm6)));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] >= (unsigned)((unsigned<8>)Imm6)));
			}
		}
	}
	CV_CMPLTU_H {
		encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] < (unsigned)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] < (unsigned)X[rs2][31:16]));
			}
		}
	}
	CV_CMPLTU_SC_H {
		encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] < (unsigned)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] < (unsigned)X[rs2][15:0]));
			}
		}
	}
	CV_CMPLTU_SCI_H {
		encoding: 5'b01000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] < (unsigned)((unsigned<16>)Imm6)));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] < (unsigned)((unsigned<16>)Imm6)));
			}
		}
	}
	CV_CMPLTU_B {
		encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] < (unsigned)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] < (unsigned)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] < (unsigned)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] < (unsigned)X[rs2][31:24]));
			}
		}
	}
	CV_CMPLTU_SC_B {
		encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] < (unsigned)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] < (unsigned)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] < (unsigned)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] < (unsigned)X[rs2][7:0]));
			}
		}
	}
	CV_CMPLTU_SCI_B {
		encoding: 5'b01000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] < (unsigned)((unsigned<8>)Imm6)));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] < (unsigned)((unsigned<8>)Imm6)));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] < (unsigned)((unsigned<8>)Imm6)));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] < (unsigned)((unsigned<8>)Imm6)));
			}
		}
	}
	CV_CMPLEU_H {
		encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] <= (unsigned)X[rs2][15: 0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] <= (unsigned)X[rs2][31:16]));
			}
		}
	}
	CV_CMPLEU_SC_H {
		encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] <= (unsigned)X[rs2][15:0]));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] <= (unsigned)X[rs2][15:0]));
			}
		}
	}
	CV_CMPLEU_SCI_H {
		encoding: 5'b01001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] <= (unsigned)((unsigned<16>)Imm6)));
				X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] <= (unsigned)((unsigned<16>)Imm6)));
			}
		}
	}
	CV_CMPLEU_B {
		encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] <= (unsigned)X[rs2][ 7: 0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] <= (unsigned)X[rs2][15: 8]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] <= (unsigned)X[rs2][23:16]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] <= (unsigned)X[rs2][31:24]));
			}
		}
	}
	CV_CMPLEU_SC_B {
		encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] <= (unsigned)X[rs2][7:0]));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] <= (unsigned)X[rs2][7:0]));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] <= (unsigned)X[rs2][7:0]));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] <= (unsigned)X[rs2][7:0]));
			}
		}
	}
	CV_CMPLEU_SCI_B {
		encoding: 5'b01001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {Imm6}";
		behavior: {
			if (rd != 0) {
				X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] <= (unsigned)((unsigned<8>)Imm6)));
				X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] <= (unsigned)((unsigned<8>)Imm6)));
				X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] <= (unsigned)((unsigned<8>)Imm6)));
				X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] <= (unsigned)((unsigned<8>)Imm6)));
			}
		}
	}
// SOURCE FILE: instr_srcs/XCoreVSIMD_Complex.txt
	CV_SUBROTMJ {
		encoding: 5'b01101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = (X[rs2][15: 0] - X[rs1][31:16])[15:0];
			}
		}
	}
	CV_SUBROTMJ_DIV2 {
		encoding: 5'b01101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = (signed)((X[rs2][15: 0] - X[rs1][31:16])[15:0]) >> 1;
			}
		}
	}
	CV_SUBROTMJ_DIV4 {
		encoding: 5'b01101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = (signed)((X[rs2][15: 0] - X[rs1][31:16])[15:0]) >> 2;
			}
		}
	}
	CV_SUBROTMJ_DIV8 {
		encoding: 5'b01101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = (signed)((X[rs2][15: 0] - X[rs1][31:16])[15:0]) >> 3;
			}
		}
	}
	CV_CPLXCONJ {
		encoding: 5'b01011 :: 1'b1 :: 1'b0 :: 5'b00000 :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = X[rs1][15: 0];
				X[rd][31:16] = -X[rs1][31:16];
			}
		}
	}
	CV_CPLXMUL_R {
		encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 15;
			}
		}
	}
	CV_CPLXMUL_R_DIV2 {
		encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 16;
			}
		}
	}
	CV_CPLXMUL_R_DIV4 {
		encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 17;
			}
		}
	}
	CV_CPLXMUL_R_DIV8 {
		encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][15: 0] = ((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 18;
			}
		}
	}
	CV_CPLXMUL_I {
		encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = ((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 15;
			}
		}
	}
	CV_CPLXMUL_I_DIV2 {
		encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = ((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 16;
			}
		}
	}
	CV_CPLXMUL_I_DIV4 {
		encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = ((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 17;
			}
		}
	}
	CV_CPLXMUL_I_DIV8 {
		encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd][31:16] = ((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 18;
			}
		}
	}
  }
}

InstructionSet XCoreVBranchImmediate extends RISCVBase {
    instructions {
        CV_BEQIMM [[no_cont]] [[cond]] {
            encoding: imm[12:12] ::imm[10:5] :: simm5[4:0] :: rs1[4:0] :: 3'b110 :: imm[4:1] :: imm[11:11] :: 7'b0001011;
            assembly:"{name(rs1)}, {simm5:#0x}, {imm:#0x}";
            behavior: {
                if (X[rs1 % RFS] == (signed)simm5) {
                    if(imm % INSTR_ALIGNMENT) {
                        raise(0, 0);
                    } else {
                        PC = PC + (signed)imm;
                    }
                }
            }
        }
        CV_BNEIMM [[no_cont]] [[cond]] {
            encoding: imm[12:12] ::imm[10:5] :: simm5[4:0] :: rs1[4:0] :: 3'b111 :: imm[4:1] :: imm[11:11] :: 7'b0001011;
            assembly:"{name(rs1)}, {simm5:#0x}, {imm:#0x}";
            // operands: signed<5> simm5, signed<13> imm, unsigned<5> rs1;
            // constraints: { field in [1, 2, 4, 8] && imm % INSTR_ALIGNMENT == 0; }
            behavior: {
                if (X[rs1 % RFS] != (signed)simm5) {
                    if(imm % INSTR_ALIGNMENT) {
                        raise(0, 0);
                    } else {
                        PC = PC + (signed)imm;
                    }
                }
            }
        }
    }
}


InstructionSet XCoreV extends XCoreVMac, XCoreVMem, XCoreVBranchImmediate, XCoreVAlu, XCoreVBitmanip, XCoreVSimd, XCoreVHwlp {
    architectural_state {
        unsigned<1> A = 1;  // TODO: Remove
    }
}
